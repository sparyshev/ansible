---
    - name: "Install epel repo"
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - epel-release

    - name: "Install packages"
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - postgresql
        - postgresql-server
        - python-setuptools
        - python2-pip
        - postgresql-devel
#        - https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

#    - name: creating alias
#      shell: echo alias pip=pip3 >> ~/.bashrc

    - name: "Install Python packages"
      pip:
        name: "{{ item }}"
        state: present
        executable: pip
      with_items:
        - psycopg2-binary

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: "Start and enable services"
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - postgresql

    - name: restart postgres
      service:
        name: postgresql
        state: restarted

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "~/data/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres

    - name: restart postgres
      service:
        name: postgresql
        state: restarted
